# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SETUP CONFIGURATION.                                                        #
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# RUFF CONFIGURATION                                                          #
[tool.ruff]
# Enable rules
select = [
    "F",    # Pyflakes (`F`)
    "E",    # pycodestyle error (`E`)
    "W",    # pycodestyle warning (`W`)
    "C90",  # mccabe (`C90`)
    "I",    # isort (`I`)
    "N",    # pep8-naming (`N`)
    "D",    # pydocstyle (`D`)
    "UP",   # pyupgrade (`UP`)
    "YTT",  # flake8-2020 (`YTT`)
    "ANN",  # flake8-annotations (`ANN`)
    "S",    # flake8-bandit (`S`)
    "BLE",  # flake8-blind-except (`BLE`)
    "FBT",  # flake8-boolean-trap (`FBT`)
    "B",    # flake8-bugbear (`B`)
    "A",    # flake8-builtins (`A`)
    "COM",  # flake8-commas (`COM`)
    "CPY",  # flake8-copyright (`CPY`)
    "C4",   # flake8-comprehensions (`C4`)
    "DTZ",  # flake8-datatimez (`DTZ`)
    "T10",  # flake8-debugger (`T10`)
    "EM",   # flake8-errmsg (`EM`)
    "FA",   # flake8-future-annotations (`FA`)
    "ISC",  # flake8-implicit-str-concat (`ISC`)
    "ICN",  # flake8-import-conventions (`ICN`)
    "PIE",  # flake8-pie (`PIE`)
    "PT",   # flake8-pytest-style (`PT`)
    "RSE",  # flake8-raise (`RSE`)
    "RET",  # flake8-return (`RET`)
    "SLF",  # flake8-self (`SLF`)
    "SIM",  # flake8-simplify (`SIM`)
    "TID",  # flake8-tidy-imports (`TID`)
    "TCH",  # flake8-type-checking (`TCH`)
    "INT",  # flake8-gettext (`INT`)
    "ARG",  # flake8-unsused-arguments (`ARG`)
    "PTH",  # flake8-use-pathlib (`PTH`)
    "TD",   # flake8-todos (`TD`)
    "FIX",  # flake8-fixme (`FIX`)
    "ERA",  # eradicate (`ERA`)
    "PD",   # pandas-vet (`PD`)
    "PGH",  # pygrep-hooks (`PGH`)
    "PL",   # pylint (`PL`)
    "TRY",  # tryceratos (`TRY`)
    "FLY",  # flynt (`FLY`)
    "NPY",  # NumPy-specific rules (`NPY`)
    "PERF", # Perflint (`PERF`)
    "RUF",  # Ruff-specific rules (`RUF`)
    # "FURB", # refurb (`FURB`) - ERROR: Unknown rule selector: `FURB`
    # "LOG",  # flake8-logging (`LOG`) - ERROR: Unknown rule selector: `LOG`
]

ignore = [
    # pydocstyle
    "D107", # Missing docstring in __init__
    "D415", # First line should end with a period, question mark, or exclamation point

    # pylint
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # consider replacing with a constant variable
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements

    # flake8-annotations
    "ANN101",   # Missing-type-self
    "ANN002",   # Missing type annotation for *args
    "ANN003",   # Missing type annotation for **kwargs

    # flake8-bandit (`S`)
    "S101", # Use of assert detected.

    # flake8-boolean-trap (`FBT`)
    "FBT001",   # Boolean positional arg in function definition
    "FBT002",   # Boolean default value in function definition

    # flake8-datatimez (`DTZ`)
    "DTZ005",    # The use of `datetime.datetime.now()` without `tz` argument is not allowed

    # flake8-fixme (`FIX`)
    "FIX002",    # Line contains TODO, consider resolving the issue
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

# Allow imports relative to the "src" and "tests" directories.
src = ["visualtorch", "tests"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.ruff.per-file-ignores]
"tests/nightly/tools/benchmarking/test_benchmarking.py" = ["E402"]

[tool.ruff.pydocstyle]
convention = "google"


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# MYPY CONFIGURATION.                                                         #
[tool.mypy]
ignore_missing_imports = true
show_error_codes = true


[[tool.mypy.overrides]]
module = ["torch.*"]
follow_imports = "skip"
follow_imports_for_stubs = true


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# PYTEST CONFIGURATION                                                        #
[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "-ra",
]
testpaths = "tests"
pythonpath = "visualtorch"
